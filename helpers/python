# -*- python -*-

import pkgutil
import sys


class PackageNotFoundError(Exception):
    def __init__(self, name):
        Exception.__init__(self, name)
        self.name = name


try:
    from importlib import import_module
except ImportError:

    def import_module(name):
        __import__(name)
        return sys.modules[name]


def print_error(message):
    sys.stderr.write("error: %s\n" % message)


def import_package(pkgname):
    parts = pkgname.split(".")
    pkgname = None
    path = sys.path
    for part in parts:
        if pkgname is None:
            pkgname = part
        else:
            pkgname = "%s.%s" % (pkgname, part)
        for _, name, ispkg in pkgutil.iter_modules(path):
            if ispkg and name == part:
                pkg = import_module(pkgname)
                path = pkg.__path__ or []
                break
        else:
            raise PackageNotFoundError(pkgname)
    return pkg


def walkpkg_onerror(pkgname=None):
    if pkgname is None:
        pkgname = "<unknown>"
    print_error("failed to import package %s" % pkgname)
    exc_info = sys.exc_info()
    if exc_info[1] is not None:
        sys.__excepthook__(*exc_info)


def walk_subpackages(pkgname):
    try:
        pkg = import_package(pkgname)
    except PackageNotFoundError:
        pkgname = sys.exc_info()[1].name
        print_error("package not found: %s" % pkgname)
        return []
    return pkgutil.walk_packages(
        pkg.__path__ or [], pkgname + ".", onerror=walkpkg_onerror
    )


def main():
    if len(sys.argv) > 1 and "." in sys.argv[1]:
        prefix = sys.argv[1]
        if prefix.startswith(".") or ".." in prefix:
            print_error("invalid module name prefix: %s" % prefix)
            modules = []
        else:
            pkgname = prefix.rpartition(".")[0]
            modules = walk_subpackages(pkgname)
    else:
        modules = pkgutil.iter_modules()

    for mod in modules:
        print(mod[1])  # noqa: E211


if __name__ == "__main__":
    main()
